METHOD: System.Int32 VSharp.Test.Tests.Fibonacci.Fib5()
RESULT: μ[FibRec]_1 + μ[FibRec]_2 + μ[FibRec]_3 + μ[FibRec]_4
HEAP:
{ heap = { heap = { heap = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec), statics = { heap = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec), statics = { heap = <empty>, statics = s0 } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } ⚪ recapp(FibRec) } where
---------- s0 = ----------
VSharp.Test.Tests.Fibonacci ==> CLASS []
