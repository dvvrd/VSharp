METHOD: System.Int32 VSharp.Test.Tests.RecursiveAccess.F(System.Int32)
RESULT: UNION[
	| !(1 + VSharp.Test.Tests.Container.X <= 10) & hasKey#2 & x <= 10 ~> 1 + VSharp.Test.Tests.Container.X + VSharp.Test.Tests.Container.X
	| !(x <= 10) ~> x
	| (!hasKey#2 | 1 + VSharp.Test.Tests.Container.X <= 10) & x <= 10 ~> 3.VSharp::Test::Tests::Bag::X + 5.VSharp::Test::Tests::Bag::X + μ[F]_1]
HEAP:
{ heap = merge[
	(!(1 + VSharp.Test.Tests.Container.X <= 10) & hasKey#2 | !(x <= 10), h0),
	((!hasKey#2 | 1 + VSharp.Test.Tests.Container.X <= 10) & x <= 10, { heap = h1, statics = s2 } ⚪ recapp(F))], statics = merge[
	(!(1 + VSharp.Test.Tests.Container.X <= 10) & hasKey#2 | !(x <= 10), s3),
	((!hasKey#2 | 1 + VSharp.Test.Tests.Container.X <= 10) & x <= 10, write({ heap = h1, statics = s2 } ⚪ recapp(F), s4))] } where
---------- h0 = ----------
3 ==> VSharp.Test.Tests.Bag CLASS [
	| VSharp::Test::Tests::Bag::X ~> UNION[
		| !hasKey#2 ~> 0
		| hasKey#2 ~> VSharp.Test.Tests.Container.X]]
---------- h1 = ----------
3 ==> VSharp.Test.Tests.Bag CLASS [
	| VSharp::Test::Tests::Bag::X ~> UNION[
		| !hasKey#2 ~> 0
		| hasKey#2 ~> VSharp.Test.Tests.Container.X]]
5 ==> VSharp.Test.Tests.Bag CLASS [
	| VSharp::Test::Tests::Bag::X ~> UNION[
		| !hasKey#2 ~> 1
		| hasKey#2 ~> 1 + VSharp.Test.Tests.Container.X]]
---------- s2 = ----------
VSharp.Test.Tests.Bag ==> CLASS []
VSharp.Test.Tests.Container ==> CLASS [
	| X ~> UNION[
		| !hasKey#2 ~> 2
		| hasKey#2 ~> 2 + VSharp.Test.Tests.Container.X]]
VSharp.Test.Tests.RecursiveAccess ==> CLASS []
---------- s3 = ----------
VSharp.Test.Tests.Bag ==> CLASS []
VSharp.Test.Tests.Container ==> UNION[
	| !(1 + VSharp.Test.Tests.Container.X <= 10) & hasKey#2 | !(x <= 10) ~> CLASS [
		| X ~> UNION[
			| !(1 + VSharp.Test.Tests.Container.X <= 10) & hasKey#2 & x <= 10 ~> 1 + VSharp.Test.Tests.Container.X
			| !(x <= 10) ~> x]]]
VSharp.Test.Tests.RecursiveAccess ==> CLASS []
---------- s4 = ----------
VSharp.Test.Tests.Container ==> CLASS [
	| X ~> UNION[
		| !(1 + VSharp.Test.Tests.Container.X <= 10) & hasKey#2 ~> 1 + VSharp.Test.Tests.Container.X
		| !hasKey#2 | 1 + VSharp.Test.Tests.Container.X <= 10 ~> 5.VSharp::Test::Tests::Bag::X + μ[F]_1]]
