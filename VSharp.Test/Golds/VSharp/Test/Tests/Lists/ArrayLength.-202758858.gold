METHOD: System.Int32 VSharp.Test.Tests.Lists.ArrayLength(System.Int32)
RESULT: Totally 3 states:
10
MEMORY DUMP:
Path condition: !(null == this) /\ 0 == f
--------------- Array contents: ---------------
System.Int32[] ==> {
        2[0] <- 0
        2[1] <- 1
        2[2] <- 2
        2[3] <- 3
        2[4] <- 4
        2[5] <- 5
        2[6] <- 6
        2[7] <- 7
        2[8] <- 8
        2[9] <- 9
    }
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 10}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Lists }

3
MEMORY DUMP:
Path condition: !(0 == f) /\ !(null == this) /\ 1 == f
--------------- Array contents: ---------------
System.Int32[] ==> {2[0] <- 1; 2[1] <- 2; 2[2] <- 3}
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 3}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
Initialized types = { System.Runtime.CompilerServices.RuntimeHelpers, VSharp.Test.Tests.Lists }

1 + f
MEMORY DUMP:
Path condition: !(0 == f) /\ !(1 + f < 0) /\ !(1 == f) /\ !(null == this)
--------------- Array lengths: ---------------
System.Int32[] ==> {2[0] <- 1 + f}
--------------- Types tokens: ---------------
2 ==> System.Int32[]
--------------- Stack: ---------------
key = __loc__0, value = (HeapRef 2 to System.Int32[])
key = this, value = (HeapRef this to VSharp.Test.Tests.Lists)
Initialized types = { VSharp.Test.Tests.Lists }
